package {{packageName}}

import io.circe._
import io.finch.circe._
import io.circe.generic.semiauto
import io.circe.generic.decoding.DerivedDecoder
import io.circe.generic.decoding.DerivedDecoder._
import io.circe.Decoder
import {{packageName}}._
{{#imports}}//import {{import}}
{{/imports}}

// TODO: properly handle custom imports
import java.io._
import java.util.Date

{{#models}}
{{#model}}
/**
 * {{{description}}}
{{#vars}}
 * @param {{name}} {{{description}}}
{{/vars}}
 */
case class {{classname}}({{#vars}}{{name}}: {{^required}}Option[{{{datatype}}}]{{/required}}{{#required}}{{{datatype}}}{{/required}}{{^-last}},{{/-last}}
                {{/vars}})

object {{classname}} {
    /**
     * Creates the codec for converting {{classname}} from and to JSON.
     */
    implicit val decoder: Decoder[{{classname}}] = semiauto.deriveDecoder
    implicit val encoder: ObjectEncoder[{{classname}}] = semiauto.deriveEncoder[{{classname}}]
}
{{/model}}
{{/models}}
