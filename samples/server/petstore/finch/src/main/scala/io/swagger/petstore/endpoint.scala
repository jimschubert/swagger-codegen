/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.petstore

import _root_.argonaut._
import com.twitter.finagle.Service
import com.twitter.finagle.http.{Request, Response}
import com.twitter.finagle.http.exp.Multipart.FileUpload
import com.twitter.util.Future
import argonaut.Argonaut._
import io.finch._
import io.finch.items.{BodyItem, ParamItem}
import io.finch.argonaut._

/**
 * Provides the paths and endpoints for all the API's public service methods.
 */
object endpoint {

  implicit val encodeException: EncodeJson[Exception] = EncodeJson {
    case Error.NotPresent(ParamItem(p)) => Json.obj(
      "error" -> jString("param_not_present"), "param" -> jString(p)
    )
    case Error.NotPresent(BodyItem) => Json.obj(
      "error" -> jString("body_not_present")
    )
    case Error.NotParsed(ParamItem(p), _, _) => Json.obj(
      "error" -> jString("param_not_parsed"), "param" -> jString(p)
    )
    case Error.NotParsed(BodyItem, _, _) => Json.obj(
      "error" -> jString("body_not_parsed")
    )
    case Error.NotValid(ParamItem(p), rule) => Json.obj(
      "error" -> jString("param_not_valid"), "param" -> jString(p), "rule" -> jString(rule)
    )
    // Domain errors
    case error: PetstoreError => Json.obj(
      "error" -> jString(error.message)
    )
  }

  /**
    * Private method that compiles all service endpoints.
    *
    * @return Bundled compilation of all service endpoints.
    */
  private def pets(db: PetstoreDb) =
  addPet(db) :+:
    deletePet(db) :+:
    findPetsByStatus(db) :+:
    findPetsByTags(db) :+:
    getPetById(db) :+:
    updatePet(db) :+:
    updatePetWithForm(db) :+:
    uploadFile(db)

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def addPet(db: PetstoreDb): Endpoint[] =
    post(Pet) { (body: Pet) =>
      NoContent(db.addPet(body))
    }

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def deletePet(db: PetstoreDb): Endpoint[] =
    post(String) { (petId: Long, apiKey: String) =>
      NoContent(db.deletePet(petId, apiKey))
    }

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def findPetsByStatus(db: PetstoreDb): Endpoint[] =
    post(List[String]) { (status: List[String]) =>
      Ok(db.findPetsByStatus(status))
    }

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def findPetsByTags(db: PetstoreDb): Endpoint[] =
    post(List[String]) { (tags: List[String]) =>
      Ok(db.findPetsByTags(tags))
    }

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def getPetById(db: PetstoreDb): Endpoint[] =
    post() { (petId: Long) =>
      Ok(db.getPetById(petId))
    }

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def updatePet(db: PetstoreDb): Endpoint[] =
    post(Pet) { (body: Pet) =>
      NoContent(db.updatePet(body))
    }

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def updatePetWithForm(db: PetstoreDb): Endpoint[] =
    post(String ? String) { (petId: Long, name: String, status: String) =>
      NoContent(db.updatePetWithForm(petId, name, status))
    }

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def uploadFile(db: PetstoreDb): Endpoint[] =
    post(String ? File) { (petId: Long, additionalMetadata: String, file: File) =>
      Ok(db.uploadFile(petId, additionalMetadata, file))
    }


  /**
    * Private method that compiles all service endpoints.
    *
    * @return Bundled compilation of all service endpoints.
    */
  private def pets(db: PetstoreDb) =
  deleteOrder(db) :+:
    getInventory(db) :+:
    getOrderById(db) :+:
    placeOrder(db)

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def deleteOrder(db: PetstoreDb): Endpoint[] =
    post() { (orderId: String) =>
      NoContent(db.deleteOrder(orderId))
    }

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def getInventory(db: PetstoreDb): Endpoint[] =
    post() {
      Ok(db.getInventory())
    }

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def getOrderById(db: PetstoreDb): Endpoint[] =
    post() { (orderId: Long) =>
      Ok(db.getOrderById(orderId))
    }

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def placeOrder(db: PetstoreDb): Endpoint[] =
    post(Order) { (body: Order) =>
      Ok(db.placeOrder(body))
    }


  /**
    * Private method that compiles all service endpoints.
    *
    * @return Bundled compilation of all service endpoints.
    */
  private def pets(db: PetstoreDb) =
  createUser(db) :+:
    createUsersWithArrayInput(db) :+:
    createUsersWithListInput(db) :+:
    deleteUser(db) :+:
    getUserByName(db) :+:
    loginUser(db) :+:
    logoutUser(db) :+:
    updateUser(db)

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def createUser(db: PetstoreDb): Endpoint[] =
    post(User) { (body: User) =>
      NoContent(db.createUser(body))
    }

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def createUsersWithArrayInput(db: PetstoreDb): Endpoint[] =
    post(List[User]) { (body: List[User]) =>
      NoContent(db.createUsersWithArrayInput(body))
    }

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def createUsersWithListInput(db: PetstoreDb): Endpoint[] =
    post(List[User]) { (body: List[User]) =>
      NoContent(db.createUsersWithListInput(body))
    }

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def deleteUser(db: PetstoreDb): Endpoint[] =
    post() { (username: String) =>
      NoContent(db.deleteUser(username))
    }

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def getUserByName(db: PetstoreDb): Endpoint[] =
    post() { (username: String) =>
      Ok(db.getUserByName(username))
    }

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def loginUser(db: PetstoreDb): Endpoint[] =
    post(String ? String) { (username: String, password: String) =>
      Ok(db.loginUser(username, password))
    }

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def logoutUser(db: PetstoreDb): Endpoint[] =
    post() {
      NoContent(db.logoutUser())
    }

  /**
    *
    * @return A Router that contains a RequestReader of a sequence of the usernames of the Users added.
    */
  def updateUser(db: PetstoreDb): Endpoint[] =
    post(User) { (username: String, body: User) =>
      NoContent(db.updateUser(username, body))
    }

  /**
    * Compiles together all the endpoints relating to public service methods.
    *
    * @return A service that contains all provided endpoints of the API.
    */
  def makeService(db: PetstoreDb): Service[Request, Response] = (
    pets(db) :+:
      store(db) :+:
      users(db)
    ).handle({
    case e: PetstoreError => NotFound(e)
  }).toService

}


